Doomy
=====

Depends:
	Black Rook JSON
	Black Rook SQL
	SQLite
	DoomStruct ?

Filesystem
----------

/ [config-folder]
	doomy.db			The database.
	/ download			Permanent storage for downloaded WADs.
	/ presets			Contains presets.
		/ [hash]		A single preset data, created on engine execution (saves/demos/shots).
	/ temp				Cleared on program startup and after engine execution (extracted data for engine call).
	
SQL Layout
----------

CREATE TABLE Meta (
	name TEXT NOT NULL,
	value TEXT NULL,
	PRIMARY KEY (name)
);
INSERT INTO Meta (name, value) VALUES
	('table.version', '1')
	;

CREATE TABLE Config (
	id INTEGER,
	name TEXT NOT NULL,
	value TEXT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
INSERT INTO Config (name, value) VALUES
	('idgames.api.url',              'https://www.doomworld.com/idgames/api/api.php'),
	('idgames.mirror.base.url',      'http://gamers.org/pub/idgames/'),
	('idgames.timeout.millis',       '10000'),
	('wadarchive.api.url',           'https://www.wad-archive.com/api/latest/'),
	('wadarchive.wadseeker.api.url', 'https://www.wad-archive.com/wadseeker/'),
	('wadarchive.timeout.millis',    '10000')
	;

CREATE TABLE Engines (
	id INTEGER,
	name TEXT NOT NULL,
	templateSource TEXT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);

CREATE TABLE EngineSettings (
	engineId INTEGER 
	name TEXT NOT NULL,
	value TEXT NULL,
	PRIMARY KEY (engineId, name),
	FOREIGN KEY (engineId) 
		REFERENCES Engines(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE
);
-- exe.path: filepath					// Engine executable path.
-- dosbox.path: filepath				// [OPT] If present (and not empty), starts DOSBox, mounts temp, and calls the EXE via it.
-- setup.exe.name: filename				// [OPT] If present, "engine setup" will run this executable in the engine's parent directory.
-- server.exe.name: filename			// [OPT] If present, "run --server" will run this executable in the engine's parent directory.
-- work.dir: path						// [OPT] If NOT present (or empty), set to either DOSBox dir or the EXE parent.
-- switch.iwad: string					// [OPT] If present (and not empty), this engine requires an IWAD and this is the switch for loading it.
-- switch.file: string					// The switch to use for loading PWAD data (might be "-merge" if Chocolate Doom).
-- switch.dehacked: string				// [OPT] The switch to use for loading DeHackEd patches (blank for unsupported).
-- switch.dehlump: string				// [OPT] The switch to use for loading DeHackEd lumps (blank for unsupported).
-- switch.save.dir: string				// [OPT] If present (and not empty), this switch is used to map to preset directories for saves.
-- switch.screenshots.dir: string		// [OPT] If present (and not empty), this switch is used to map to preset directories for screenshots.
-- regex.screenshots: string			// [OPT] If present (and not empty), this regex pattern is used to find screenshot files in the Engine Dir to move to the preset folder on exit, or preset to Engine dir.
-- regex.demos: string					// [OPT] If present (and not empty), this regex pattern is used to find demo files in the Engine Dir to move to the preset folder on exit, or preset to Engine dir.
-- regex.saves: string					// [OPT] If present (and not empty), this regex pattern is used to find savegame files in the Engine Dir to move to the preset folder on exit, or preset to Engine dir.
-- cmdline: string						// [OPT] If present (and not empty), this command line is appended (but before the as-is passed-in options).

CREATE TABLE IWADs (
	id INTEGER,
	name TEXT NOT NULL,
	path TEXT NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);

CREATE TABLE WADs (
	id INTEGER,
	name TEXT NOT NULL,
	path TEXT NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);

CREATE TABLE WADData (
	wadId INTEGER NOT NULL,
	name TEXT NOT NULL,
	value TEXT NULL,
	PRIMARY KEY (wadId, name),
	FOREIGN KEY (wadId) 
		REFERENCES WADs(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE
);

CREATE TABLE WADSources (
	wadId INTEGER NOT NULL,
	url TEXT NOT NULL,
	UNIQUE (wadId),
	FOREIGN KEY (wadId) 
		REFERENCES WADs(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE
);

CREATE TABLE WADDependencies (
	wadId INTEGER NOT NULL,
	needsWadId INTEGER NOT NULL,
	UNIQUE (wadId, needsWadId),
	FOREIGN KEY (wadId) 
		REFERENCES WADs(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE,
	FOREIGN KEY (needsWadId) 
		REFERENCES WADs(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE
);

CREATE TABLE Preset (
	id INTEGER,
	hash TEXT NOT NULL,
	name TEXT NULL,
	engineName TEXT NOT NULL,
	iwadName TEXT NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (hash),
	UNIQUE (name),
	FOREIGN KEY (engineName) 
		REFERENCES Engines(name)
			ON DELETE NO ACTION
			ON UPDATE CASCADE,
	FOREIGN KEY (iwadName) 
		REFERENCES IWADs(name)
			ON DELETE NO ACTION
			ON UPDATE CASCADE
);

CREATE TABLE PresetItem (
	id INTEGER,
	presetId INTEGER NOT NULL,
	wadId INTEGER NOT NULL,
	sort INTEGER NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (presetId, wadId),
	FOREIGN KEY (presetId) 
		REFERENCES Preset(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE
);

..............................................................................

CREATE TABLE EngineTemplates (
	id INTEGER,
	name TEXT NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE EngineTemplateSettings (
	engineTemplateId INTEGER,
	name TEXT NOT NULL,
	value TEXT NULL,
	PRIMARY KEY (engineTemplateId, name),
	FOREIGN KEY (engineTemplateId) 
		REFERENCES EngineTemplates(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE
);

..............................................................................

final class IdGamesDriver {
	...
}

final class WadArchiveDriver {
	...
}

final class ConfigDriver {
	private SQLConnection connection;
	...
}

final class AsyncDriver {
	...
}

enum Response {
	SUCCESS,
	...
}

abstract class DoomyCommand {
	Response process(PrintStream out, PrintStream err, InputStream in, Deque<String> args);
}

class DoomyCommandFactory {
	public static DoomyCommand parseCommand(Deque<String> args) {
		...
	}
}

main (String... args) {
	Linked
}

